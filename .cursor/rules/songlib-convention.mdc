---
alwaysApply: true
---

[1] 네이밍 규칙

1.1 기본 원칙
- 변수와 함수는 직관적이고 명확한 이름 사용
- 생소한 약어는 지양하며, 사용 시 주석으로 설명

1.2 네이밍 상세
- Private 변수: _camelCase
- Protected 변수: camelCase
- Public 변수 및 함수: PascalCase
- 프로퍼티
  - 읽기 전용: IsAlive, NormalizedHealth
  - 자동 구현: MaxHealth, IsInvincible
  - 전체 구현: CurrentHealth (내부 get/set 포함)
- 함수명: LoadData(), CalculateTotal() 등 동사로 시작
- 코루틴 함수: CoAttack(), CoFadeOut() 등 Co 접두사
- Flag 변수: isReady, canExecute, hasItems 등 조동사 포함
- Action 및 콜백: onExampleCallback, onExample()
- 인터페이스: IBoardItem, IPlayerController

1.3 Unity 관련 규칙
- SerializeField는 한 줄로 작성
- Header 구분자 사용 권장
- 기본값 지정 가능

예:
[SerializeField] private Rigidbody _rb;
[SerializeField] private float _jumpForce = 10f;

1.4 약어 및 주석
private int _ioCount; // I/O: Input/Output
private bool _aiEnabled; // AI: Artificial Intelligence

1.5 문자열 상수 관리
- 모든 문자열은 StringKeys.cs에서 정의
- 직접 문자열 사용 금지
- 현지화 필요 시 // TODO:localize 주석 추가

예:
public static class StringKeys {
    public const string PLAYER = "Player";
    public const string ANSWER_QUIT = "게임을 종료하시겠습니까?"; // TODO:localize
}

---

[2] 중괄호 스타일

- 블록 중괄호는 다음 줄에 작성 (C# 표준)
- 단일 문장 블록은 예외적으로 한 줄 작성 가능
- 람다식은 줄바꿈 없이 사용 가능

예:
if (condition) {
    DoSomething();
}

if (isValid) return true;

---

[3] 주석 및 문서화

3.1 TODO 형식
TODO:(작성자):(주제) - 내용
예: // TODO:minb:refactor - 성능 최적화를 위한 리팩토링 필요

3.2 MEMO 형식
예: // MEMO: 호출 순서를 꼭 지켜줘야 함

---

[4] 디버그 클래스 사용 규칙

4.1 디버그 분류
- Debug: Unity 기본 로그
- DebugHelper: 에디터 전용 로그 (#if UNITY_EDITOR)
- DebugEx: ENABLE_LOG 심볼 정의 시 출력
- DebugNetwork: SET_DEBUG_NETWORK 심볼 정의 시 출력

4.2 사용 예시
Debug.Log("플레이어 체력: " + playerHealth);
DebugHelper.Log("에디터 로그");
DebugEx.Log("빌드 한정 로그");
DebugNetwork.Log("네트워크 디버그");

---

[5] UI 네이밍 규칙

[SerializeField] private Button _exitBtn;   // Btn_Exit
[SerializeField] private TextMeshProUGUI _titleTMP; // TMP_Title
[SerializeField] private Image _iconImg;    // Img_Icon

---

[6] Live Template - Region

#region << =========== $name$ =========== >>

$SELECTION$

#endregion